[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "genomic_ranges"
authors = [
  { name = "Gert Hulselmans", email = "gert.hulselmans@kuleuven.be" },
]
description = "Genomic ranges: PyRanges-like functionality using Polars dataframes instead of Pandas dataframes"
readme = "README.md"
requires-python = ">=3.8"
keywords = ["genomic ranges", "pyranges"]
license = { file = "LICENSE.txt" }
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Console",
  "Intended Audience :: Science/Research",
  "License :: Other/Proprietary License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Topic :: Scientific/Engineering :: Bio-Informatics",
]
dynamic = ["version"]
dependencies = [
    "numpy >= 1.20.3",
    "polars >= 0.18.3",
    "ncls >= 0.0.63",
]

[project.urls]
Homepage = "https://github.com/ghuls/genomic_ranges"
#Documentation = "https://genomic_ranges.readthedocs.io/"
Repository = "https://github.com/ghuls/genomic_ranges"
Changelog = "https://github.com/ghuls/genomic_ranges/releases"

[project.optional-dependencies]
pandas = ["pandas == 1.5"]
pyarrow = ["pyarrow >= 8.0.0"]
pyranges = ["pyranges"]


#[project.scripts]
#genomic_ranges = "genomic_ranges.cli.genomic_ranges:main"

# ... other project metadata fields as specified in:
#     https://packaging.python.org/en/latest/specifications/declaring-project-metadata/

# [tool.mypy]
# files = ["polars", "tests"]
# strict = true
# enable_error_code = [
#  "redundant-expr",
#  "truthy-bool",
#  "ignore-without-code",
# ]
# disable_error_code = [
#  "empty-body",
# ]
#
# [[tool.mypy.overrides]]
# module = [
#  "backports",
#  "pyarrow.*",
#  "polars.polars",
#  "matplotlib.*",
#  "fsspec.*",
#  "connectorx",
#  "deltalake",
#  "IPython.*",
#  "zoneinfo",
# ]
# ignore_missing_imports = true
#
# [[tool.mypy.overrides]]
# module = ["IPython.*"]
# follow_imports = "skip"
#
# [[tool.mypy.overrides]]
# module = ["polars.*"]
## We exclude the polars module from warn_return_any, because the PyO3 api does not have Python
## type annotations. See https://github.com/PyO3/pyo3/issues/1112 for a discussion on adding
## this capability. We could add a stub file for polars.polars (the PyO3 api), but that
## amounts to duplicating almost all type annotations on our api, as the Python api itself is a
## thin wrapper around the PyO3 api to start with.
# warn_return_any = false

[tool.ruff]
target-version = "py38"
line-length = 88
#fix = true

select = [
  "E", # pycodestyle
  "W", # pycodestyle
  "F", # Pyflakes
  "B", # flake8-bugbear
  "C4", # flake8-comprehensions
  "D", # flake8-docstrings
  "I", # isort
  "SIM", # flake8-simplify
  "TCH", # flake8-type-checking
  "TID", # flake8-tidy-imports
  "Q", # flake8-quotes
  "UP", # pyupgrade
  "PT", # flake8-pytest-style
  "RUF", # Ruff-specific rules
]

ignore = [
  # Line length regulated by black
  "E501",
  # pydocstyle: http://www.pydocstyle.org/en/stable/error_codes.html
  # numpy convention with a few additional lints
  "D107",
  "D203",
  "D212",
  "D401",
  "D402",
  "D415",
  "D416",
  # flake8-pytest-style:
  "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
  # flake8-simplify
  "SIM102", # Use a single `if` statement instead of nested `if` statements
  # ruff
  "RUF005", # unpack-instead-of-concatenating-to-collection-literal
  # pycodestyle
  # TODO: Remove errors below to further improve docstring linting
  # Ordered from most common to least common errors.
  "D105",
  "D100",
  "D103",
  "D102",
  "D104",
  "D101",
]

[tool.ruff.pycodestyle]
max-doc-length = 88

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
"polars/datatypes.py" = ["B019"]
"tests/**/*.py" = ["D100", "D103"]

#[tool.pytest.ini_options]
#addopts = [
#  "--strict-config",
#  "--strict-markers",
#  "--import-mode=importlib",
#  # Default to running fast tests only. To run ALL tests, run: pytest -m ""
#  "-m not slow and not hypothesis and not benchmark",
#]
#markers = [
#  "slow: Tests with a longer than average runtime.",
#  "benchmark: Tests that should be run on a Polars release build.",
#]
#filterwarnings = "error" # Fail on warnings

#[tool.coverage.run]
#source = ["polars"]
#branch = true

#[tool.coverage.report]
#fail_under = 85
#skip_covered = true
#show_missing = true
#exclude_lines = [
#  "pragma: no cover",
#  "@overload",
#  "except ImportError",
#  "if TYPE_CHECKING:",
#  "from typing_extensions import ",
#]
